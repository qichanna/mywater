Rect startBounds = new Rect();
Point globalOffset = new Point();
view.getGlobalVisibleRect(startBounds,globalOffset);
getGlobalVisibleRect可以得到gaiview在整个界面中上下左右边距赋给rect，point是左上角的坐标

view.setPivotX(0f);
view.setPivotY(0f);

AnimatorSet set = new AnimatorSet();
set
     .play(ObjectAnimator.ofFloat(expandedImageView, View.X, startBounds.left,
             finalBounds.left))
     .with(ObjectAnimator.ofFloat(expandedImageView, View.Y, startBounds.top,
             finalBounds.top))
     .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X, startScale, 1f))
     .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_Y, startScale, 1f));
set.setInterpolator(new DecelerateInterpolator());
以view的(0,0)左边为支点进行动画


当view发送改变时候，可以加入改变的动画
1.android:animateLayoutChanges="true", 该view需要有这个属性
2.如果要自定义动画， create a LayoutTransition object and supply it to the layout with the setLayoutTransition() method.


在 onCreate()中执行finish()会立刻调用onDestroy()，而不调用任何其他 生命周期方法。极端情况下，系统可能会仅终止应用进程，而不会调用Activity的最终 onDestroy() 回调，因此您使用 onStop() 释放可能泄露内存的资源非常重要。

onRestoreInstanceState()方法在onStart()之后调用，比onCreate()后面一些，所以也可以选择在这里恢复Bundle，两者的区别在于onRestoreInstanceState()不需要自己判断是否为空，而且onCreate()则需要。


//保存文件
内部存储路径: getFilesDir(),  getCacheDir()
外部存储路径: getExternalFilesDir(),  getExternalStoragePublicDirectory()

当用户卸载您的应用时，只有在您通过 getExternalFilesDir() 将您的应用的文件保存在目录中时，系统才会从此处删除您的应用的文件。如果不想应用被删除时删除文件，则用getExternalStoragePublicDirectory()

第一种:   
     File file = new File(context.getFilesDir(), filename);
     FileOutputStream outputStream = openFileOutput(file, Context.MODE_PRIVATE);
     outputStream.write(bitmap.getBytes());
     outputStream.close();
     
第二种:
     File file = new File(context.getFilesDir(), filename);
     FileOutputStream fos = new FileOutputStream(file);
     bitmap.compress(Bitmap.CompressFormat.JPEG, 60, fos);
     
检查外部存储是否可用:
    String state = Environment.getExternalStorageState();
    if (Environment.MEDIA_MOUNTED.equals(state)) {
        return true;
    }
    return false;
    
可用空间: getFreeSpace() 
存储卷中空间: getTotalSpace() 

删除文件: myFile.delete()
删除内部存储中文件可用: myContext.deleteFile(fileName);
getCacheDir()中创建的需要手动删除

//调用其他APP应用

判断是否有符合的intent
1.
     PackageManager packageManager = getPackageManager();
     List<ResolveInfo> activities = packageManager.queryIntentActivities(mapIntent, 0);
     boolean isIntentSafe = activities.size() > 0;

     if (isIntentSafe) {
          startActivity(mapIntent);
     }
   
2.
     Intent chooser = Intent.createChooser(intent, title);
     if (intent.resolveActivity(getPackageManager()) != null) {
          startActivity(chooser);
     }
     
     
getAction包含操作（比如按下，抬起之类的）和信息（包括坐标等等）
getActionMasked只包含操作


谷歌支持HttpURLConnection原因有：
1.谷歌不愿意维护HTTPclient ，因为HTTPclient兼容性问题， 而支持HttpURLConnection
2.HttpURLConnection API简便而且包小，对安卓很合适
3.HttpURLConnection 对于提高速度和节省电池有帮助，同时谷歌也愿意在这方面花时间研究去更进一步的提高性能。


canvas.save后如果有旋转画布等操作，坐标会一起旋转过去，也就是说坐标相对于画布不变
canvas.restore执行后，坐标就会变为相对于屏幕左上角为（0，0）这样的
需要注意的是restore只能回复到save之后，如果在save前已经调用过其他操作画布的方法，是不能通过restore还原的
例如：
canvas.save()
canvas.rotate(90, px/2, py/2);
canvas.restore()
save前左上角坐标为(0,0)
save后由于旋转了90度，右上角坐标为(0,0)
restore是恢复到save前的状态，即左上角又变为(0,0)了


----------------------------------------------------------------------
activity四种状态：
running：正常情况，在宅顶
paused:失去焦点，被一个非全屏的activity，或者被一个透明的界面放在上面，用户对该activity操作没反应
stopped：被一个activity完全覆盖
kill:系统回收


activity启动 onCreate()->onStart()->onResume()
onStart()在前台可见但还不能和用户交互，不能和用户操作
onResume()在前台既可见，又可交互

按home onPause()(activity还可见)->onStop()（已经不可见，被完全覆盖）

按home键后，再从桌面回到原activity onRestart()->onStart()->onResume()

退出activity onPause()->onStop()->onDestroy()(回收工作和资源释放)



Activity:
android进程优先级
前台/可见/服务/后台/空(例如作为缓存之类的)
任务棧
四种启动模式(standard,singletop,singletask,singleinstance)
scheme
